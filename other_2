const handleOcrToggle = async () => {
    if (selectedRows.length === 0 && !isOcrRunning) return;

    const newStatus = isOcrRunning ? "stop" : "start";

    const statusResponse = await fetch("/api/jobs/ocr", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ status: newStatus }),
    });

    const statusData = await statusResponse.json();
    if (!statusResponse.ok) {
      console.error("Error:", statusData.message);
      return;
    }

    if (newStatus === "stop") {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
      setIsOcrRunning(false);
      setSelectedRows([]);
      setProgress({});
      fetchJobs();
      setIsProcessModalOpen(false);
      return;
    }

    setIsOcrRunning(true);
    setIsProcessModalOpen(true);
    setProgress({});

    const pdfFiles = selectedRows
      .map((rowId) => {
        const job = master.find((job) => job._id === rowId);
        return job ? { file_url: job.pdfUrl } : null;
      })
      .filter(Boolean);

    intervalRef.current = setInterval(async () => {
      try {

        const progressResponse = await fetch("https://hanneskonzept.ml-bench.com/api/ocr-progress", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ pdfFiles }),
        });

        if (!progressResponse.ok) throw new Error("Failed to fetch progress");

        const progressData = await progressResponse.json();
        console.log(progressData.progress);
        setProgress(progressData.progress);

        if (Object.values(progressData.progress).every((p) => Number(p) >= 100)) {
          if (intervalRef.current) {
            clearInterval(intervalRef.current);
            intervalRef.current = null;
          }
          setIsOcrRunning(false);
          fetchJobs();
          setSelectedRows([]);
          setIsProcessModalOpen(false);

          const newStatus = "stop";

          await fetch("/api/jobs/ocr", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ status: newStatus }),
          });

        }
      } catch (error) {
        console.error("Error fetching progress:", error);
      }
    }, 5000);

    // try {
    //   const response = await fetch("https://hanneskonzept.ml-bench.com/api/process-pdf", {
    //     method: "POST",
    //     headers: { "Content-Type": "application/json" },
    //     body: JSON.stringify({ pdfFiles }),
    //   });

    //   if (!response.ok) throw new Error("Failed to start OCR");
    // } catch (error) {
    //   console.error("Error processing OCR:", error);
    //   setIsOcrRunning(false);
    //   if (intervalRef.current) clearInterval(intervalRef.current);
    // }

    try {
      const response = await fetch("https://hanneskonzept.ml-bench.com/api/process-pdf", {
        method: "POST",
        mode: "cors",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ pdfFiles }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => null);
        throw new Error(errorData?.error || "Failed to start OCR");
      }
    } catch (error: unknown) {
      if (error instanceof Error) {
        console.error("Error processing OCR:", error.message);
      } else {
        console.error("Unexpected error:", error);
      }

      setIsOcrRunning(false);
      if (intervalRef.current) clearInterval(intervalRef.current);
    }


  };